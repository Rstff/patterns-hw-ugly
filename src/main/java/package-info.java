/*
 * Singleton:   применён в классе Controller, потому что в программе нужен только один
 * экземпляр класса Controller, как единая точка сборки приложения.
 * Factory:     не применён - потому что, генератары и InputProcessor уже являются фабриками,
 * а более применение этого паттерна не требуется.
 * Builder:     применён,в классе Person, как вложенный класс PersonBuilder, потому что позволяет
 * более наглядно и удобно собирать по частям сложный объект person, что дало сокращиние и повышение
 * читабельности кода.
 * Adapter:     не применён - потому что нет необходимости объектам
 * с несовместимыми интерфейсами работать вместе.
 * Bridge:      не применён - потому что в нашем приложении нет большого количества
 * наследования классов и менять наследование на композицию не имеет смысла.
 * Facade:      как таковой паттерн не применен отдельно, но при применение паттерна шаблон,
 * создается метод generate, в абстрактном классе GenerateParams, который является фасадом.
 * DTO:         Применён - потому что ФИО удобнее передавать одним целым между частями программы,
 * используя для этого как data transfer object -  экземпляр класса Fio, что дает
 * сокращение и повышение читабельности кода.
 * Шаблон:      применён в package generators, как созданный абстрактный класс GenerateParams,
 * потому что все генераторы создаются по одному алгоритму, который удобнее вывести в отдельный
 * абстрактный класс.
 */